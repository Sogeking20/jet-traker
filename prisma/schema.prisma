// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String?
  post           String?
  subunit        String?
  salary         Int?
  role           Role
  companyId      Int?
  company        Company? @relation(fields: [companyId], references: [id])
  schedules      Schedule[]
  requests       Request[]
  vacation       Vacation[]
  notifications  Notification[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Company {
  id Int @id @default(autoincrement())
  name      String
  industry  String
  timeZone  String
  employees User[]
  schedules Schedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requests Request[]
  vacation       Vacation[]
  notifications  Notification[]
  // subscriptionId Int
  // subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  shift     String // Например: "09:00-18:00"
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Request {
  id        Int         @id @default(autoincrement())
  type      TimeOffType
  status    RequestStatus @default(PENDING)
  fromDate  DateTime
  toDate    DateTime
  reason    String?
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  companyId  Int
  company    Company       @relation(fields: [companyId], references: [id])
  createdAt DateTime    @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  companyId Int?
  company   Company?     @relation(fields: [companyId], references: [id])
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Vacation {
  id        Int         @id @default(autoincrement())
  type      TypeVacation
  status    RequestStatus @default(PENDING)
  fromDate  DateTime
  toDate    DateTime
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  companyId  Int
  company    Company       @relation(fields: [companyId], references: [id])
  createdAt DateTime    @default(now())
}

// model Subscription {
//   id        Int      @id @default(autoincrement())
//   type        SubscriptionType
//   price       Float
//   description String?
//   companies   Company[]
// }

enum SubscriptionType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum Role {
  
  MANAGER
  EMPLOYEE
}

enum TimeOffType {
  VACATION
  SICK_LEAVE
  DAY_OFF
}

enum TypeVacation {
  PAID
  UNPAID
}


enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
